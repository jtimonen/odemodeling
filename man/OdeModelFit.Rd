% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/classes-fit.R
\name{OdeModelFit}
\alias{OdeModelFit}
\title{An ODE model fit (R6 class)}
\description{
The fields \code{cmdstanr_time}, \code{cmdstanr_summary},
and \code{cmdstanr_draws} store the output of \code{cmdstanr_fit}'s
methods \verb{$time()}, \verb{$summary()}, and \verb{$draws()} methods, respectively,
in memory in case \code{cmdstanr_fit} gets corrupted (for example
if the CSV files that it reads the data from are destroyed).
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{model}}{An object of class \link{OdeModel}.}

\item{\code{standata}}{Full 'Stan' input data list.}

\item{\code{cmdstanr_fit}}{a \link[cmdstanr:CmdStanMCMC]{cmdstanr::CmdStanMCMC} object.}

\item{\code{cmdstanr_time}}{A list containing output of the  \verb{$time()} method
of \code{cmdstanr_fit}.}

\item{\code{cmdstanr_summary}}{A tibble containing output of the \verb{$summary()}
method of \code{cmdstanr_fit}.}

\item{\code{cmdstanr_draws}}{A \link[posterior:draws_array]{posterior::draws_array} object containing the
output of the \verb{$draws()} method of \code{cmdstanr_fit}.}

\item{\code{cmdstanr_metadata}}{A list containing output of the \verb{$metadata()}
method of \code{cmdstanr_fit}.}

\item{\code{setup_time}}{Time it took to call \verb{$initialize()} when the
\link{OdeModelFit} object was created (in seconds).}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{OdeModelFit$new()}}
\item \href{#method-time}{\code{OdeModelFit$time()}}
\item \href{#method-draws}{\code{OdeModelFit$draws()}}
\item \href{#method-summary}{\code{OdeModelFit$summary()}}
\item \href{#method-print}{\code{OdeModelFit$print()}}
\item \href{#method-draws_size}{\code{OdeModelFit$draws_size()}}
\item \href{#method-cmdstan_version}{\code{OdeModelFit$cmdstan_version()}}
\item \href{#method-cmdstan_seed}{\code{OdeModelFit$cmdstan_seed()}}
\item \href{#method-cmdstan_init}{\code{OdeModelFit$cmdstan_init()}}
\item \href{#method-dim}{\code{OdeModelFit$dim()}}
\item \href{#method-dim_odesol}{\code{OdeModelFit$dim_odesol()}}
\item \href{#method-extract_unflattened}{\code{OdeModelFit$extract_unflattened()}}
\item \href{#method-extract_odesol}{\code{OdeModelFit$extract_odesol()}}
\item \href{#method-extract_odesol_tibble}{\code{OdeModelFit$extract_odesol_tibble()}}
\item \href{#method-clone}{\code{OdeModelFit$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Create an \link{OdeModelFit} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OdeModelFit$new(model, cmdstanr_fit, standata)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{model}}{An object of class \link{OdeModel} (will be deepcopied).}

\item{\code{cmdstanr_fit}}{A \link[cmdstanr:CmdStanMCMC]{cmdstanr::CmdStanMCMC} object (will be deepcopied).}

\item{\code{standata}}{Full 'Stan' input data list.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-time"></a>}}
\if{latex}{\out{\hypertarget{method-time}{}}}
\subsection{Method \code{time()}}{
Get time information.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OdeModelFit$time()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A list.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-draws"></a>}}
\if{latex}{\out{\hypertarget{method-draws}{}}}
\subsection{Method \code{draws()}}{
Get draws (parameters and generated quantities).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OdeModelFit$draws(variable = NULL, iteration = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{variable}}{Name of variable.}

\item{\code{iteration}}{Index of iteration.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A \link[posterior:draws_array]{posterior::draws_array} object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-summary"></a>}}
\if{latex}{\out{\hypertarget{method-summary}{}}}
\subsection{Method \code{summary()}}{
Get summary
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OdeModelFit$summary()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A \code{tibble}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-print"></a>}}
\if{latex}{\out{\hypertarget{method-print}{}}}
\subsection{Method \code{print()}}{
Print information about the fit
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OdeModelFit$print()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-draws_size"></a>}}
\if{latex}{\out{\hypertarget{method-draws_size}{}}}
\subsection{Method \code{draws_size()}}{
Get size of the draws object in Mb.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OdeModelFit$draws_size()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A string.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-cmdstan_version"></a>}}
\if{latex}{\out{\hypertarget{method-cmdstan_version}{}}}
\subsection{Method \code{cmdstan_version()}}{
Get used 'CmdStan' version.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OdeModelFit$cmdstan_version()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A string.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-cmdstan_seed"></a>}}
\if{latex}{\out{\hypertarget{method-cmdstan_seed}{}}}
\subsection{Method \code{cmdstan_seed()}}{
Get used 'CmdStan' rng seed.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OdeModelFit$cmdstan_seed()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A string.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-cmdstan_init"></a>}}
\if{latex}{\out{\hypertarget{method-cmdstan_init}{}}}
\subsection{Method \code{cmdstan_init()}}{
Get used 'CmdStan' init argument.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OdeModelFit$cmdstan_init()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A string.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-dim"></a>}}
\if{latex}{\out{\hypertarget{method-dim}{}}}
\subsection{Method \code{dim()}}{
Get dimensions of a variable.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OdeModelFit$dim(variable)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{variable}}{Name of variable.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A numeric vector, which is the 'Stan' variable dimension,
obtained as \code{metadata$stan_variable_dims[[variable]]}, where
\code{metadata} is the metadata of the \link[cmdstanr:CmdStanMCMC]{cmdstanr::CmdStanMCMC} object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-dim_odesol"></a>}}
\if{latex}{\out{\hypertarget{method-dim_odesol}{}}}
\subsection{Method \code{dim_odesol()}}{
Extract the dimensions of the ODE solution variable.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OdeModelFit$dim_odesol()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A numeric vector of length 2, where first element is the
number of time points and second element is the ODE system dimension.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-extract_unflattened"></a>}}
\if{latex}{\out{\hypertarget{method-extract_unflattened}{}}}
\subsection{Method \code{extract_unflattened()}}{
Extract array variable draws so that the array is unflattened.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OdeModelFit$extract_unflattened(variable)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{variable}}{Name of variable.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A base \R array of dimension \code{c(num_draws, ...)} where \code{num_draws}
is the total number of draws and \code{...} is the 'Stan' variable dimension,
obtained as \code{self$dim(variable)}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-extract_odesol"></a>}}
\if{latex}{\out{\hypertarget{method-extract_odesol}{}}}
\subsection{Method \code{extract_odesol()}}{
Extract the ODE solutions using each parameter draw, in an
unflattened base \R array format.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OdeModelFit$extract_odesol()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A base \R array of dimension \code{c(num_draws, N, D)} where
\code{num_draws} is the total number of draws and \code{N} is the number of
time points and \code{D} is the number of ODE system dimensions.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-extract_odesol_tibble"></a>}}
\if{latex}{\out{\hypertarget{method-extract_odesol_tibble}{}}}
\subsection{Method \code{extract_odesol_tibble()}}{
Extract the ODE solutions using each parameter draw, in a
flattened data frame format that is easy to pass as data
to \code{\link[ggplot2:ggplot]{ggplot2::ggplot()}}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OdeModelFit$extract_odesol_tibble()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A tibble.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OdeModelFit$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
