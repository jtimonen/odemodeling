% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/classes-standecl.R
\name{StanDeclaration}
\alias{StanDeclaration}
\title{A Stan variable declaration (an abstract base class)}
\description{
A Stan variable declaration (an abstract base class)

A Stan variable declaration (an abstract base class)
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{name}}{name of the variable}

\item{\code{lower}}{lower bound}

\item{\code{upper}}{upper bound}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{StanDeclaration$new()}}
\item \href{#method-declaration}{\code{StanDeclaration$declaration()}}
\item \href{#method-signature}{\code{StanDeclaration$signature()}}
\item \href{#method-print}{\code{StanDeclaration$print()}}
\item \href{#method-can_be_made_parameter}{\code{StanDeclaration$can_be_made_parameter()}}
\item \href{#method-get_dims}{\code{StanDeclaration$get_dims()}}
\item \href{#method-clone}{\code{StanDeclaration$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{StanDeclaration$new()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-declaration"></a>}}
\if{latex}{\out{\hypertarget{method-declaration}{}}}
\subsection{Method \code{declaration()}}{
The variable declaration as a string.
The variable when used in function signature
Print
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{StanDeclaration$declaration()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-signature"></a>}}
\if{latex}{\out{\hypertarget{method-signature}{}}}
\subsection{Method \code{signature()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{StanDeclaration$signature()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-print"></a>}}
\if{latex}{\out{\hypertarget{method-print}{}}}
\subsection{Method \code{print()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{StanDeclaration$print()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-can_be_made_parameter"></a>}}
\if{latex}{\out{\hypertarget{method-can_be_made_parameter}{}}}
\subsection{Method \code{can_be_made_parameter()}}{
Can the object be made into a parameter?
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{StanDeclaration$can_be_made_parameter()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_dims"></a>}}
\if{latex}{\out{\hypertarget{method-get_dims}{}}}
\subsection{Method \code{get_dims()}}{
Get all declared dimensions related to the object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{StanDeclaration$get_dims()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A list.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{StanDeclaration$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
